version: 1.0.{build}

os: Visual Studio 2015

platform: x64

configuration: Release

branches:
  only:
    - master
    - latest
    - release

shallow_clone: true
clone_depth: 5

matrix:
  fast_finish: false # set this flag to immediately finish build once one of the jobs fails.

environment:
  matrix:
    - DB: MSSQL2008
      USE_UNICODE: OFF
      USE_BOOST_CONVERT: OFF
    - DB: MSSQL2014
      USE_UNICODE: OFF
      USE_BOOST_CONVERT: OFF
    - DB: MySQL
      USE_UNICODE: OFF
      USE_BOOST_CONVERT: OFF
    - DB: PostgreSQL
      USE_UNICODE: OFF
      USE_BOOST_CONVERT: OFF
    - DB: SQLite
      USE_UNICODE: OFF
      USE_BOOST_CONVERT: OFF

init:
  - ps: |
      Write-Host "Build worker environment variables:" -ForegroundColor Magenta
      Get-ChildItem Env: | %{"{0}={1}" -f $_.Name,$_.Value}

install:
  - ps: |
      if ($env:DB -Match "SQLite") {
        Write-Host "Installing SQLite ODBC Driver:" -ForegroundColor Magenta
        $sqliteodbcPath = "$($env:TEMP)\sqliteodbc_w64.exe"
        (New-Object Net.WebClient).DownloadFile('http://www.ch-werner.de/sqliteodbc/sqliteodbc_w64.exe', $sqliteodbcPath)
        cmd /c start /wait $sqliteodbcPath /S
        if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }
       }
  - ps: |
      Write-Host "Installed ODBC drivers:" -ForegroundColor Magenta
      Get-OdbcDriver -Platform 64-bit | Select-Object -ExpandProperty Name

before_build:
  - ps: 'Write-Host "Running CMake:" -ForegroundColor Magenta'
  - cmake.exe -G "Visual Studio 14 2015 Win64" -DNANODBC_USE_BOOST_CONVERT=%USE_BOOST_CONVERT% -DNANODBC_USE_UNICODE=%USE_UNICODE% -DNANODBC_STATIC=ON -DNANODBC_HANDLE_NODATA_BUG=OFF -DNANODBC_INSTALL=OFF %APPVEYOR_BUILD_FOLDER%
  - ps: 'Write-Host "Running MSBuild:" -ForegroundColor Magenta'

build:
  parallel: true
  project: nanodbc.sln
  verbosity: minimal

before_test:
  - ps: 'Write-Host Configuring $env:DB service -ForegroundColor Magenta'
  - ps: |
      if ($env:DB -Match "MSSQL2008") {
        Start-Service 'MSSQL$SQL2008R2SP2'
      } elseif ($env:DB -Match "MSSQL2014") {
        Start-Service 'MSSQL$SQL2014'
      } elseif ($env:DB -Match "MySQL") {
        Start-Service MySQL57
        $env:MYSQL_PWD="Password12!"
        $cmd = '"C:\Program Files\MySQL\MySQL Server 5.7\bin\mysql" -e "create database nanodbc_test;" --user=root'
        iex "& $cmd"
      } elseif ($env:DB -Match "PostgreSQL") {
        Start-Service postgresql-x64-9.5
        $env:PGUSER="postgres"
        $env:PGPASSWORD="Password12!"
        $cmd = '"C:\Program Files\PostgreSQL\9.3\bin\createdb" nanodbc_test'
        iex "& $cmd"
      }
      if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

test_script:
  - ps: |
      if ($env:DB -Match "MSSQL2008") {
        $env:NANODBC_TEST_CONNSTR_MSSQL="Driver={ODBC Driver 11 for SQL Server};Server=(local)\SQL2008R2SP2;Database=master;UID=sa;PWD=Password12!;"
        $test_name = "mssql_test"
      } elseif ($env:DB -Match "MSSQL2014") {
        $env:NANODBC_TEST_CONNSTR_MSSQL="Driver={ODBC Driver 11 for SQL Server};Server=(local)\SQL2014;Database=master;UID=sa;PWD=Password12!;"
        $test_name = "mssql_test"
      } elseif ($env:DB -Match "MySQL") {
        $env:NANODBC_TEST_CONNSTR_MYSQL="Driver={MySQL ODBC 5.3 ANSI Driver};Server=127.0.0.1;Database=nanodbc_test;User=root;Password=Password12!;"
        $test_name = "mysql_test"
      } elseif ($env:DB -Match "PostgreSQL") {
        $env:NANODBC_TEST_CONNSTR_PGSQL="Driver={PostgreSQL ANSI(x64)};Server=127.0.0.1;Port=5432;Database=nanodbc_test;Uid=postgres;Pwd=Password12!;"
        $test_name = "postgresql_test"
      } elseif ($env:DB -Match "SQLite") {
        $test_name = "sqlite_test"
      } else {
        throw 'TODO: ' + $env:DB + ' not configured yet'
      }
      Write-Host Running $Env:CONFIGURATION build test: $test_name -ForegroundColor Magenta
  - ps: |
      $cmd = 'ctest -V --output-on-failure -C ' + $Env:CONFIGURATION + ' -R ' + $test_name
      iex "& $cmd"
      if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

# If you need to debug AppVeyor session (https://www.appveyor.com/docs/how-to/rdp-to-build-worker), then:
# 1. Uncomment the on_finish section below:
#on_finish:
#  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
# 2. Add this line to the init section below
#- ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
